schema {
  query: Query
  mutation: Mutation
}

enum AnnouncementType {
  EVENT
  AGITATION
}

input CreateAnnouncementInput {
  type: AnnouncementType! 
  author: String! 
  title: String! 
  content: String! 
  resources: [MapTupleInput] 
  range: String!
  org: String!
}
# agitation sample message and anouncement use same type
type Announcement {
  #  A unique identifier for the Conversation.
  id: ID!
  #  The Announcement's timestamp. Could be String in YYYY-MM-DDThh:mm:ss.sssZ format
  modifiedAt: String!
  #type - events || agitation
  type: AnnouncementType!
  author: String!
  # org_range: MY_ORG::WWA::WTF
  category: String!
  title: String!
  content: String!
  resources: [MapTuple]
  range: String!
  org: String!
  orgRangeKey: String!
}

input CreateLocationInput {
  range: String!
  org: String!
}

type Location {
  id: ID!
  orgRangeKey: String!
  modifiedAt: String!
  range: String!
  org: String!
  doc_type: String!
}

type LocationConnection {
  location: [Location]
  nextToken: String
 }

input MapTupleInput {
  key: String!
  value: String
}
type MapTuple {
  key: String!
  value: String
}
type Mutation {
  #  Create event or agitation message
  createAnnouncement(
    input: CreateAnnouncementInput
  ): Announcement!
  createLocation(
    input: CreateLocationInput!
  ): Location!
  #  Create person (coordinator) 
}
type Query {
  allLocations(
    org: String!
    limit: Int
    nextToken: String
  ): LocationConnection
  allAnouncement(
    after: String 
    first: Int
    range: String
    org: String!
    type: AnnouncementType
  ): [Announcement]
}
