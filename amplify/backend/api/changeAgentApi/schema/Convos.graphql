enum ConversationType {
  EVENT
  REGION
}

type Conversation
  @model(
    queries: { get: "getConversation", list: "listConversation" }
    mutations: {
      create: "createConversation"
      update: "updateConversation"
      delete: "deleteConversation"
    }
  )
  @auth(rules: [{ allow: public }])
  @key(fields: ["id"])
  @key(name: "Region", fields: ["region", "type", "name"], queryField: "listCoversationsByRegion") {
  id: ID!
  #  The Conversation's messages.
  messages: [Message] @connection(name: "Index", keyField: "conversationId")
  # users in channel - for pubkey retrival
  users: [User] @connection(keyField: "userId")
  #  The Conversation's name.
  name: String!
  type: ConversationType!
  region: String!
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message
  @model(
    queries: { get: "getMessage", list: "listMessage" }
    mutations: { create: "createMessage", update: null, delete: null }
  )
  @auth(rules: [{ allow: public }]) {
  # conv-id + timestamp
  id: ID!
  #real identity, used for auth and possible banning evil users
  author: User! @connection(keyField: "authorId")
  #ephemeric string used as a nick during creation - should be visible in FE
  authorNick: String!
  #  The message content.
  content: String!
  #  The id of the Conversation this message belongs to. This is the table unique GSI key.
  conversation: Conversation! @connection(name: "Index", keyField: "conversationId")
  #  Flag denoting if this message has been accepted by the server or not.
  isSent: Boolean
  resources: [Resource]
  region: String!
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
