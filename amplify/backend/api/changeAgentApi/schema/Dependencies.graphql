# storing all available regions in application
type Location
  @model(
    queries: { get: "getLocation", list: "listLocation" }
    mutations: { create: "createLocation", update: "updateLocation", delete: "deleteLocation" }
    subscriptions: null
  )
  @auth(rules: [{ allow: public }])
  @key(fields: ["org", "region"])
  @key(name: "Index", fields: ["id"], queryField: "listLocationByIndex") {
  #  The id of the Conversation this message belongs to. This is the table unique GSI key.
  id: ID
  # ex ORG1#PL#WAW
  region: String!
  # ex ORG1
  org: String!
  name: String!
  coordinatorName: String!
  coordinatorEmail: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# storing all available message categories in application
type Category
  @model(
    queries: { get: "getCategory", list: "listCategory" }
    mutations: { create: "createCategory", update: null, delete: "deleteCategory" }
    subscriptions: null
  )
  @auth(rules: [{ allow: public }])
  @key(fields: ["region", "name"])
  @key(name: "Index", fields: ["id"], queryField: "listCategoryByIndex")
  @key(name: "Org", fields: ["org", "region", "name"], queryField: "listCategoryByOrg") {
  #  The id of the Conversation this message belongs to. This is the table unique GSI key.
  id: ID
  # ex ORG1#PL#WAW
  region: String!
  # ex ORG1
  org: String!
  name: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

#getUser is called "me" and works withouth params. Just using context
type User
  @model(
    queries: { get: "getUser", list: "listUser" }
    mutations: { create: "createUser", update: "updateUser", delete: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public }])
  @key(fields: ["cognitoId"])
  @key(name: "Org", fields: ["org", "cognitoGroup"], queryField: "listUsersByOrg") {
  #  A unique identifier for the user. cognito:sub
  cognitoId: ID!
  #  cognito:group
  cognitoGroup: String!
  #  last known ephemeric username
  currentNick: String!
  # user pub key for future usage
  pubKey: String
  #
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
