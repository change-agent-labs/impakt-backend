type MapTuple {
  key: String!
  value: String
}

# storing all available regions in application
type Location 
  @model( mutations: {create: "createLocation", update: null, delete: null})
  @key(fields: ["org", "region"])
 {
  id: ID
  # ex ORG1#PL#WAW
  region: String!
  # ex ORG1
  org: String!
  name: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# storing all available announcement categories in application
type Category 
  @model( mutations: {create: "createCategory", update: null, delete: "deleteCategory" },  )
  @key(fields: ["org", "region", "name" ])
 {
  id: ID
  # ex ORG1#PL#WAW
  region: String!
  # ex ORG1
  org: String!
  name: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type MessageOfTheDay 
  @model( mutations: {create: "createMessageOfTheDay", update: null, delete: null})
  @key(fields: ["region", "category", "title"])
  @key(name: "org", fields: ["org", "category", "title"], queryField: "listMessageOfTheDaysByOrg" )
{
  #  A unique identifier for the Conversation.
  id: ID
  #type - events || message
  author: String!
  # org_range: MY_ORG::WWA::WTF
  category: String!
  title: String!
  content: String!
  resources: [MapTuple]
  region: String!
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}


type Event 
  @model( mutations: {create: "createEvent", update: null, delete: null})
  @key(fields: ["region", "category", "title"])
  @key(name: "org", fields: ["org", "category", "title"], queryField: "listEventsByOrg" )
{
  #  A unique identifier for the Conversation.
  id: ID
  #type - events || message
  author: String!
  # org_range: MY_ORG::WWA::WTF
  category: String!
  title: String!
  content: String!
  resources: [MapTuple]
  region: String!
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}