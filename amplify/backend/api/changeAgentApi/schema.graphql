type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Resource 
  @model 
  {
  id: ID!
  name: String
  author: String

  # Reference the S3Object type from a field.
  file: S3Object
}

# storing all available regions in application
type Location 
  @model( queries: { get: "getLocation", list: "listLocation" }, mutations: {create: "createLocation", update: null, delete: null})
  @key(fields: ["org", "region"])
 {
  id: ID
  # ex ORG1#PL#WAW
  region: String!
  # ex ORG1
  org: String!
  name: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# storing all available message categories in application
type Category 
  @model( queries: { get: "getCategory", list: "listCategory" }, mutations: {create: "createCategory", update: null, delete: "deleteCategory" }  )
  @key(fields: ["org", "region", "name" ])
 {
  id: ID
  # ex ORG1#PL#WAW
  region: String!
  # ex ORG1
  org: String!
  name: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Propaganda 
  @model( queries: { get: "getPropaganda", list: "listPropaganda" }, mutations: {create: "createPropaganda", update: "updatePropaganda", delete: "deletePropaganda"})
  @key(fields: ["region", "category", "title"])
  @key(name: "org", fields: ["org", "category", "title"], queryField: "listPropagandaByOrg" )
{
  id: ID
  author: String!
  category: String!
  title: String!
  # org_range: MY_ORG::WWA::WTF
  content: String!
  resources: [Resource]
  region: String!
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}


type Event
  @model( queries: { get: "getEvent", list: "listEvent" }, mutations: {create: "createEvent", update: "updateEvent", delete: "deleteEvent"})
  @key(fields: ["region", "category", "title"])
  @key(name: "org", fields: ["org", "category", "title"], queryField: "listEventByOrg" )
{
  id: ID
  author: String!
  category: String!
  title: String!
  # org_range: MY_ORG::WWA::WTF
  content: String!
  resources: [Resource]
  region: String!
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Announcement
  @model( mutations: {create: "createNews", update: null, delete: null})
  @key(fields: ["region", "category", "title"])
  @key(name: "org", fields: ["org", "category", "title"], queryField: "listAnnouncementByOrg" )
{
  id: ID
  author: String!
  category: String!
  title: String!
  # org_range: MY_ORG::WWA::WTF
  content: String!
  resources: [Resource]
  region: String!
  org: String!
  #### autogen
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

#for "aktualnosci page"
union Important = Announcement | Event
type Query {
    listAllImportantNotifications(region: String!): [Important]
}