const { SES, SSM } = require('aws-sdk');

async function getServiceEmail() {
  const secretName = 'change-agent-service-email';
  const req = {
    Names: [secretName],
    WithDecryption: true,
  };
  let email = null;
  try {
    const resp = await new SSM().getParameters(req).promise();
    email = resp.Parameters[0].Value;
  } catch (error) {
    console.log('Failed to retrive service email', error);
  }
  return email;
}

async function sentEmail(args) {
  console.log('Handling notify email to', args.coordinatorEmail);

  if (!args.coordinatorEmail.match(/^[^@]+@[^@]+$/)) {
    console.log('Not sending: invalid coordinator email address', args.coordinatorEmail);
    return 'FAILED';
  }

  const serviceEmail = await getServiceEmail();
  if (serviceEmail === null) {
    return 'FAILED';
  }

  const textBody = `
    Dear Regional Coordinator,

    ${args.currentNick} is looking to contact you.
    Contact details: ${args.contactDetails}
    Optional message: ${args.msg} is looking to contact you.
    
    This is autogenerated message from Change-Agent App. Please don't respond.
  `;

  // Create sendEmail params
  const params = {
    Destination: {
      ToAddresses: [args.coordinatorEmail],
    },
    Message: {
      Body: {
        Text: {
          Charset: 'UTF-8',
          Data: textBody,
        },
      },
      Subject: {
        Charset: 'UTF-8',
        Data: `Contact request from ${args.currentNick}`,
      },
    },
    Source: `Change-Agent notification service <${serviceEmail}>`,
  };

  // Create the promise and SES service object
  try {
    await new SES().sendEmail(params).promise();
  } catch (error) {
    console.log('Error while sending Email', error);
    return 'Failed';
  }
  return 'Success';
}

const resolvers = {
  Mutation: {
    notifyCoordinator: async args => {
      const result = await sentEmail(args);
      return result;
    },
  },
};

exports.handler = async event => {
  console.log(`event = ${JSON.stringify(event)}`);
  const resolver = resolvers[event.typeName][event.fieldName];
  if (resolver) {
    const result = await resolver(event.arguments);
    return result;
  }
  throw new Error('Resolver not found.');
};
